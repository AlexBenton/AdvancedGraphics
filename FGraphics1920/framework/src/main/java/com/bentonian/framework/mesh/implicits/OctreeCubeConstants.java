package com.bentonian.framework.mesh.implicits;

public class OctreeCubeConstants {

  public static final int[][] CUBE_EDGE_INDICES = new int[256][];

  static {
    Non();                                                                                   // { 0 0 0 0 0 0 0 0 }
    Mon(  0,  3,  4);                                                                        // { 1 0 0 0 0 0 0 0 }
    Mon(  1,  0,  5);                                                                        // { 0 1 0 0 0 0 0 0 }
    Duo(  1,  3,  5,     5,  3,  4);                                                         // { 1 1 0 0 0 0 0 0 }
    Mon(  2,  1,  6);                                                                        // { 0 0 1 0 0 0 0 0 }
    Duo(  2,  1,  6,     0,  3,  4);                                                         // { 1 0 1 0 0 0 0 0 }
    Duo(  2,  0,  6,     6,  0,  5);                                                         // { 0 1 1 0 0 0 0 0 }
    Tri(  3,  4,  5,     2,  5,  6,     2,  3,  5);                                          // { 1 1 1 0 0 0 0 0 }
    Mon(  3,  2,  7);                                                                        // { 0 0 0 1 0 0 0 0 }
    Duo(  2,  7,  4,     2,  4,  0);                                                         // { 1 0 0 1 0 0 0 0 }
    Duo(  2,  7,  3,     1,  0,  5);                                                         // { 0 1 0 1 0 0 0 0 }
    Tri(  2,  7,  4,     1,  4,  5,     1,  2,  4);                                          // { 1 1 0 1 0 0 0 0 }
    Duo(  1,  7,  3,     1,  6,  7);                                                         // { 0 0 1 1 0 0 0 0 }
    Tri(  1,  6,  7,     0,  7,  4,     0,  1,  7);                                          // { 1 0 1 1 0 0 0 0 }
    Tri(  0,  5,  6,     3,  6,  7,     3,  0,  6);                                          // { 0 1 1 1 0 0 0 0 }
    Duo(  4,  5,  6,     4,  6,  7);                                                         // { 1 1 1 1 0 0 0 0 }
    Mon( 11,  7, 10);                                                                        // { 0 0 0 0 1 0 0 0 }
    Duo(  7, 10, 11,     0,  3,  4);                                                         // { 1 0 0 0 1 0 0 0 }
    Duo(  7, 10, 11,     1,  0,  5);                                                         // { 0 1 0 0 1 0 0 0 }
    Tri(  1,  3,  5,     5,  3,  4,     7, 10, 11);                                          // { 1 1 0 0 1 0 0 0 }
    Duo(  2,  1,  6,     7, 10, 11);                                                         // { 0 0 1 0 1 0 0 0 }
    Tri(  2,  1,  6,     0,  3,  4,     7, 10, 11);                                          // { 1 0 1 0 1 0 0 0 }
    Tri(  0,  5,  2,     5,  6,  2,     7, 10, 11);                                          // { 0 1 1 0 1 0 0 0 }
    Qud(  3,  4,  5,     3,  5,  6,     3,  6,  2,     7, 10, 11);                           // { 1 1 1 0 1 0 0 0 }
    Duo(  2, 10,  3,     3, 10, 11);                                                         // { 0 0 0 1 1 0 0 0 }
    Tri(  2, 10, 11,     2, 11,  4,     2,  4,  0);                                          // { 1 0 0 1 1 0 0 0 }
    Tri( 10, 11,  2,    11,  3,  2,     1,  0,  5);                                          // { 0 1 0 1 1 0 0 0 }
    Qud( 11,  4,  5,    11,  5,  2,     5,  1,  2,    11,  2, 10);                           // { 1 1 0 1 1 0 0 0 }
    Tri( 10, 11,  3,     6,  3,  1,     6, 10,  3);                                          // { 0 0 1 1 1 0 0 0 }
    Qud(  0,  1,  6,     0,  6, 10,     0, 10, 11,     0, 11,  4);                           // { 1 0 1 1 1 0 0 0 }
    Qud(  5,  3,  0,     5,  6, 10,     5, 10, 11,     5, 11,  3);                           // { 0 1 1 1 1 0 0 0 }
    Tri(  4,  5,  6,    10, 11,  4,    10,  4,  6);                                          // { 1 1 1 1 1 0 0 0 }
    Mon( 10,  6,  9);                                                                        // { 0 0 0 0 0 1 0 0 }
    Duo(  4,  0,  3,     9, 10,  6);                                                         // { 1 0 0 0 0 1 0 0 }
    Duo(  0,  5,  1,     9, 10,  6);                                                         // { 0 1 0 0 0 1 0 0 }
    Tri(  3,  4,  1,     4,  5,  1,     6,  9, 10);                                          // { 1 1 0 0 0 1 0 0 }
    Duo(  2,  1,  9,     2,  9, 10);                                                         // { 0 0 1 0 0 1 0 0 }
    Tri(  2,  1,  9,     2,  9, 10,     0,  3,  4);                                          // { 1 0 1 0 0 1 0 0 }
    Tri(  9, 10,  2,     5,  2,  0,     5,  9,  2);                                          // { 0 1 1 0 0 1 0 0 }
    Qud(  3, 10,  2,     3,  5, 10,    10,  5,  9,     3,  4,  5);                           // { 1 1 1 0 0 1 0 0 }
    Duo(  6,  9, 10,     7,  3,  2);                                                         // { 0 0 0 1 0 1 0 0 }
    Tri(  0,  2,  4,     4,  2,  7,     6,  9, 10);                                          // { 1 0 0 1 0 1 0 0 }
    Tri(  1,  0,  5,     3,  2,  7,     6,  9, 10);                                          // { 0 1 0 1 0 1 0 0 }
    Qud(  2,  7,  4,     2,  4,  5,     2,  5,  1,     6,  9, 10);                           // { 1 1 0 1 0 1 0 0 }
    Tri( 10,  1,  9,     7,  3,  1,     7,  1, 10);                                          // { 0 0 1 1 0 1 0 0 }
    Qud( 10,  7,  4,    10,  4,  1,     4,  0,  1,    10,  1,  9);                           // { 1 0 1 1 0 1 0 0 }
    Qud(  3,  0,  5,     3,  5,  9,     3,  9, 10,     3, 10,  7);                           // { 0 1 1 1 0 1 0 0 }
    Tri( 10,  7,  4,     9,  4,  5,     9, 10,  4);                                          // { 1 1 1 1 0 1 0 0 }
    Duo( 11,  7,  9,     7,  6,  9);                                                         // { 0 0 0 0 1 1 0 0 }
    Tri(  9, 11,  6,     6, 11,  7,     4,  0,  3);                                          // { 1 0 0 0 1 1 0 0 }
    Tri( 11,  7,  9,     7,  6,  9,     5,  1,  0);                                          // { 0 1 0 0 1 1 0 0 }
    Qud(  6,  9, 11,     6, 11,  7,     1,  3,  4,     1,  4,  5);                           // { 1 1 0 0 1 1 0 0 }
    Tri(  2,  1,  9,     7,  9, 11,     7,  2,  9);                                          // { 0 0 1 0 1 1 0 0 }
    Qud(  2,  1,  9,     2,  9, 11,     2, 11,  7,     3,  4,  0);                           // { 1 0 1 0 1 1 0 0 }
    Qud( 11,  7,  2,    11,  5,  9,    11,  0,  5,    11,  2,  0);                           // { 0 1 1 0 1 1 0 0 }
    Tri(  9, 11,  5,     5, 11,  4,     7,  2,  3);                                          // { 1 1 1 0 1 1 0 0 }
    Tri(  2, 11,  3,     6,  9, 11,     6, 11,  2);                                          // { 0 0 0 1 1 1 0 0 }
    Qud(  0, 11,  4,     0,  2,  6,     0,  6,  9,     0,  9, 11);                           // { 1 0 0 1 1 1 0 0 }
    Qud(  2, 11,  3,     2,  9, 11,     2,  6,  9,     1,  0,  5);                           // { 0 1 0 1 1 1 0 0 }
    Tri( 11,  4,  9,     4,  5,  9,     6,  1,  2);                                          // { 1 1 0 1 1 1 0 0 }
    Duo( 11,  3,  1,    11,  1,  9);                                                         // { 0 0 1 1 1 1 0 0 }
    Tri(  0,  1,  9,     4,  9, 11,     4,  0,  9);                                          // { 1 0 1 1 1 1 0 0 }
    Tri(  0, 11,  3,     5,  9, 11,     5, 11,  0);                                          // { 0 1 1 1 1 1 0 0 }
    Duo(  9, 11,  5,     5, 11,  4);                                                         // { 1 1 1 1 1 1 0 0 }
    Mon(  9,  5,  8);                                                                        // { 0 0 0 0 0 0 1 0 }
    Duo(  4,  0,  3,     5,  8,  9);                                                         // { 1 0 0 0 0 0 1 0 }
    Duo(  0,  8,  1,     1,  8,  9);                                                         // { 0 1 0 0 0 0 1 0 }
    Tri(  8,  9,  1,     4,  1,  3,     4,  8,  1);                                          // { 1 1 0 0 0 0 1 0 }
    Duo(  5,  8,  9,     6,  2,  1);                                                         // { 0 0 1 0 0 0 1 0 }
    Tri(  0,  3,  4,     2,  1,  6,     5,  8,  9);                                          // { 1 0 1 0 0 0 1 0 }
    Tri(  9,  0,  8,     6,  2,  0,     6,  0,  9);                                          // { 0 1 1 0 0 0 1 0 }
    Qud(  2,  3,  4,     2,  4,  8,     2,  8,  9,     2,  9,  6);                           // { 1 1 1 0 0 0 1 0 }
    Duo(  5,  8,  9,     3,  2,  7);                                                         // { 0 0 0 1 0 0 1 0 }
    Tri(  2,  7,  0,     7,  4,  0,     5,  8,  9);                                          // { 1 0 0 1 0 0 1 0 }
    Tri(  8,  9,  0,     9,  1,  0,     3,  2,  7);                                          // { 0 1 0 1 0 0 1 0 }
    Qud(  2,  9,  1,     2,  4,  9,     9,  4,  8,     2,  7,  4);                           // { 1 1 0 1 0 0 1 0 }
    Tri(  3,  1,  7,     7,  1,  6,     5,  8,  9);                                          // { 0 0 1 1 0 0 1 0 }
    Qud(  1,  6,  7,     1,  7,  4,     1,  4,  0,     5,  8,  9);                           // { 1 0 1 1 0 0 1 0 }
    Qud(  9,  6,  7,     9,  7,  0,     7,  3,  0,     9,  0,  8);                           // { 0 1 1 1 0 0 1 0 }
    Tri(  9,  6,  7,     8,  7,  4,     8,  9,  7);                                          // { 1 1 1 1 0 0 1 0 }
    Duo( 11,  7, 10,     9,  5,  8);                                                         // { 0 0 0 0 1 0 1 0 }
    Tri( 11,  7, 10,     9,  5,  8,     4,  0,  3);                                          // { 1 0 0 0 1 0 1 0 }
    Tri(  0,  8,  1,     1,  8,  9,    11,  7, 10);                                          // { 0 1 0 0 1 0 1 0 }
    Qud(  8,  9,  1,     8,  1,  3,     8,  3,  4,    11,  7, 10);                           // { 1 1 0 0 1 0 1 0 }
    Tri(  9,  5,  8,    11,  7, 10,     6,  2,  1);                                          // { 0 0 1 0 1 0 1 0 }
    Qud(  1,  6,  2,     5,  8,  9,     0,  3,  4,     7, 10, 11);                           // { 1 0 1 0 1 0 1 0 }
    Qud(  9,  0,  8,     9,  2,  0,     9,  6,  2,    10, 11,  7);                           // { 0 1 1 0 1 0 1 0 }
    Tri( 10,  9,  6,     8, 11,  4,     7,  2,  3);                                          // { 1 1 1 0 1 0 1 0 }
    Tri(  2, 10,  3,     3, 10, 11,     9,  5,  8);                                          // { 0 0 0 1 1 0 1 0 }
    Qud( 11,  2, 10,    11,  0,  2,    11,  4,  0,     8,  9,  5);                           // { 1 0 0 1 1 0 1 0 }
    Qud(  3,  2, 10,     3, 10, 11,     0,  8,  9,     0,  9,  1);                           // { 0 1 0 1 1 0 1 0 }
    Tri(  1,  2,  9,     2, 10,  9,     8, 11,  4);                                          // { 1 1 0 1 1 0 1 0 }
    Qud( 10, 11,  3,    10,  3,  1,    10,  1,  6,     9,  5,  8);                           // { 0 0 1 1 1 0 1 0 }
    Tri(  8, 11,  4,    10,  9,  6,     5,  0,  1);                                          // { 1 0 1 1 1 0 1 0 }
    Tri(  3,  0, 11,     0,  8, 11,    10,  9,  6);                                          // { 0 1 1 1 1 0 1 0 }
    Duo( 10,  9,  6,     8, 11,  4);                                                         // { 1 1 1 1 1 0 1 0 }
    Duo( 10,  6,  8,     6,  5,  8);                                                         // { 0 0 0 0 0 1 1 0 }
    Tri( 10,  6,  8,     6,  5,  8,     4,  0,  3);                                          // { 1 0 0 0 0 1 1 0 }
    Tri(  1,  0,  8,     6,  8, 10,     6,  1,  8);                                          // { 0 1 0 0 0 1 1 0 }
    Qud( 10,  6,  1,    10,  4,  8,    10,  3,  4,    10,  1,  3);                           // { 1 1 0 0 0 1 1 0 }
    Tri(  1, 10,  2,     5,  8, 10,     5, 10,  1);                                          // { 0 0 1 0 0 1 1 0 }
    Qud(  1, 10,  2,     1,  8, 10,     1,  5,  8,     0,  3,  4);                           // { 1 0 1 0 0 1 1 0 }
    Duo( 10,  2,  0,    10,  0,  8);                                                         // { 0 1 1 0 0 1 1 0 }
    Tri(  3, 10,  2,     4,  8, 10,     4, 10,  3);                                          // { 1 1 1 0 0 1 1 0 }
    Tri(  8, 10,  5,     5, 10,  6,     7,  3,  2);                                          // { 0 0 0 1 0 1 1 0 }
    Qud(  5,  8, 10,     5, 10,  6,     0,  2,  7,     0,  7,  4);                           // { 1 0 0 1 0 1 1 0 }
    Qud(  1,  0,  8,     1,  8, 10,     1, 10,  6,     2,  7,  3);                           // { 0 1 0 1 0 1 1 0 }
    Tri(  8, 10,  4,     4, 10,  7,     6,  1,  2);                                          // { 1 1 0 1 0 1 1 0 }
    Qud(  3, 10,  7,     3,  1,  5,     3,  5,  8,     3,  8, 10);                           // { 0 0 1 1 0 1 1 0 }
    Tri( 10,  7,  8,     7,  4,  8,     5,  0,  1);                                          // { 1 0 1 1 0 1 1 0 }
    Tri(  3,  0,  8,     7,  8, 10,     7,  3,  8);                                          // { 0 1 1 1 0 1 1 0 }
    Duo(  8, 10,  4,     4, 10,  7);                                                         // { 1 1 1 1 0 1 1 0 }
    Tri(  8,  6,  5,    11,  7,  6,    11,  6,  8);                                          // { 0 0 0 0 1 1 1 0 }
    Qud(  8,  6,  5,     8,  7,  6,     8, 11,  7,     4,  0,  3);                           // { 1 0 0 0 1 1 1 0 }
    Qud(  1,  7,  6,     1,  8,  7,     7,  8, 11,     1,  0,  8);                           // { 0 1 0 0 1 1 1 0 }
    Tri(  1,  3,  6,     6,  3,  7,     4,  8, 11);                                          // { 1 1 0 0 1 1 1 0 }
    Qud( 11,  5,  8,    11,  1,  5,    11,  2,  1,    11,  7,  2);                           // { 0 0 1 0 1 1 1 0 }
    Tri(  3,  7,  2,     1,  5,  0,     4,  8, 11);                                          // { 1 0 1 0 1 1 1 0 }
    Tri( 11,  0,  8,     7,  2,  0,     7,  0, 11);                                          // { 0 1 1 0 1 1 1 0 }
    Duo(  7,  2,  3,     4,  8, 11);                                                         // { 1 1 1 0 1 1 1 0 }
    Qud(  8, 11,  3,     8,  3,  6,     3,  2,  6,     8,  6,  5);                           // { 0 0 0 1 1 1 1 0 }
    Tri(  2,  6,  0,     6,  5,  0,     4,  8, 11);                                          // { 1 0 0 1 1 1 1 0 }
    Tri( 11,  3,  8,     8,  3,  0,     2,  6,  1);                                          // { 0 1 0 1 1 1 1 0 }
    Duo(  4,  8, 11,     2,  6,  1);                                                         // { 1 1 0 1 1 1 1 0 }
    Tri(  8, 11,  3,     5,  3,  1,     5,  8,  3);                                          // { 0 0 1 1 1 1 1 0 }
    Duo(  4,  8, 11,     5,  0,  1);                                                         // { 1 0 1 1 1 1 1 0 }
    Duo(  3,  0, 11,     0,  8, 11);                                                         // { 0 1 1 1 1 1 1 0 }
    Mon(  8, 11,  4);                                                                        // { 1 1 1 1 1 1 1 0 }
    Mon(  8,  4, 11);                                                                        // { 0 0 0 0 0 0 0 1 }
    Duo(  3, 11,  0,     0, 11,  8);                                                         // { 1 0 0 0 0 0 0 1 }
    Duo(  4, 11,  8,     5,  1,  0);                                                         // { 0 1 0 0 0 0 0 1 }
    Tri(  8,  3, 11,     5,  1,  3,     5,  3,  8);                                          // { 1 1 0 0 0 0 0 1 }
    Duo(  4, 11,  8,     2,  1,  6);                                                         // { 0 0 1 0 0 0 0 1 }
    Tri( 11,  8,  3,     8,  0,  3,     2,  1,  6);                                          // { 1 0 1 0 0 0 0 1 }
    Tri(  2,  0,  6,     6,  0,  5,     4, 11,  8);                                          // { 0 1 1 0 0 0 0 1 }
    Qud(  8,  5,  6,     8,  6,  3,     6,  2,  3,     8,  3, 11);                           // { 1 1 1 0 0 0 0 1 }
    Duo(  7,  3,  2,     4, 11,  8);                                                         // { 0 0 0 1 0 0 0 1 }
    Tri( 11,  8,  0,     7,  0,  2,     7, 11,  0);                                          // { 1 0 0 1 0 0 0 1 }
    Tri(  3,  2,  7,     1,  0,  5,     4, 11,  8);                                          // { 0 1 0 1 0 0 0 1 }
    Qud(  1,  2,  7,     1,  7, 11,     1, 11,  8,     1,  8,  5);                           // { 1 1 0 1 0 0 0 1 }
    Tri(  1,  6,  3,     6,  7,  3,     4, 11,  8);                                          // { 0 0 1 1 0 0 0 1 }
    Qud(  1,  8,  0,     1,  7,  8,     8,  7, 11,     1,  6,  7);                           // { 1 0 1 1 0 0 0 1 }
    Qud(  0,  5,  6,     0,  6,  7,     0,  7,  3,     4, 11,  8);                           // { 0 1 1 1 0 0 0 1 }
    Tri(  8,  5,  6,    11,  6,  7,    11,  8,  6);                                          // { 1 1 1 1 0 0 0 1 }
    Duo(  8,  4, 10,     4,  7, 10);                                                         // { 0 0 0 0 1 0 0 1 }
    Tri(  3,  8,  0,     7, 10,  8,     7,  8,  3);                                          // { 1 0 0 0 1 0 0 1 }
    Tri( 10,  8,  7,     7,  8,  4,     5,  1,  0);                                          // { 0 1 0 0 1 0 0 1 }
    Qud(  1,  8,  5,     1,  3,  7,     1,  7, 10,     1, 10,  8);                           // { 1 1 0 0 1 0 0 1 }
    Tri(  8,  4, 10,     4,  7, 10,     6,  2,  1);                                          // { 0 0 1 0 1 0 0 1 }
    Qud(  3,  8,  0,     3, 10,  8,     3,  7, 10,     2,  1,  6);                           // { 1 0 1 0 1 0 0 1 }
    Qud(  7, 10,  8,     7,  8,  4,     2,  0,  5,     2,  5,  6);                           // { 0 1 1 0 1 0 0 1 }
    Tri(  8,  5, 10,     5,  6, 10,     7,  2,  3);                                          // { 1 1 1 0 1 0 0 1 }
    Tri(  3,  2, 10,     4, 10,  8,     4,  3, 10);                                          // { 0 0 0 1 1 0 0 1 }
    Duo(  8,  0,  2,     8,  2, 10);                                                         // { 1 0 0 1 1 0 0 1 }
    Qud(  3,  2, 10,     3, 10,  8,     3,  8,  4,     0,  5,  1);                           // { 0 1 0 1 1 0 0 1 }
    Tri(  1,  2, 10,     5, 10,  8,     5,  1, 10);                                          // { 1 1 0 1 1 0 0 1 }
    Qud(  8,  4,  3,     8,  6, 10,     8,  1,  6,     8,  3,  1);                           // { 0 0 1 1 1 0 0 1 }
    Tri(  1,  8,  0,     6, 10,  8,     6,  8,  1);                                          // { 1 0 1 1 1 0 0 1 }
    Tri( 10,  8,  6,     6,  8,  5,     4,  3,  0);                                          // { 0 1 1 1 1 0 0 1 }
    Duo( 10,  8,  6,     6,  8,  5);                                                         // { 1 1 1 1 1 0 0 1 }
    Duo( 10,  6,  9,     8,  4, 11);                                                         // { 0 0 0 0 0 1 0 1 }
    Tri(  3, 11,  0,     0, 11,  8,    10,  6,  9);                                          // { 1 0 0 0 0 1 0 1 }
    Tri(  8,  4, 11,    10,  6,  9,     5,  1,  0);                                          // { 0 1 0 0 0 1 0 1 }
    Qud(  8,  3, 11,     8,  1,  3,     8,  5,  1,     9, 10,  6);                           // { 1 1 0 0 0 1 0 1 }
    Tri(  1,  9,  2,     2,  9, 10,     8,  4, 11);                                          // { 0 0 1 0 0 1 0 1 }
    Qud(  2,  1,  9,     2,  9, 10,     3, 11,  8,     3,  8,  0);                           // { 1 0 1 0 0 1 0 1 }
    Qud(  9, 10,  2,     9,  2,  0,     9,  0,  5,     8,  4, 11);                           // { 0 1 1 0 0 1 0 1 }
    Tri(  2,  3, 10,     3, 11, 10,     9,  8,  5);                                          // { 1 1 1 0 0 1 0 1 }
    Tri( 10,  6,  9,     8,  4, 11,     7,  3,  2);                                          // { 0 0 0 1 0 1 0 1 }
    Qud( 11,  8,  0,    11,  0,  2,    11,  2,  7,    10,  6,  9);                           // { 1 0 0 1 0 1 0 1 }
    Qud(  2,  7,  3,     6,  9, 10,     1,  0,  5,     4, 11,  8);                           // { 0 1 0 1 0 1 0 1 }
    Tri(  9,  8,  5,    11, 10,  7,     6,  1,  2);                                          // { 1 1 0 1 0 1 0 1 }
    Qud( 10,  1,  9,    10,  3,  1,    10,  7,  3,    11,  8,  4);                           // { 0 0 1 1 0 1 0 1 }
    Tri(  0,  1,  8,     1,  9,  8,    11, 10,  7);                                          // { 1 0 1 1 0 1 0 1 }
    Tri( 11, 10,  7,     9,  8,  5,     4,  3,  0);                                          // { 0 1 1 1 0 1 0 1 }
    Duo( 11, 10,  7,     9,  8,  5);                                                         // { 1 1 1 1 0 1 0 1 }
    Tri(  9,  7,  6,     8,  4,  7,     8,  7,  9);                                          // { 0 0 0 0 1 1 0 1 }
    Qud(  9,  8,  0,     9,  0,  7,     0,  3,  7,     9,  7,  6);                           // { 1 0 0 0 1 1 0 1 }
    Qud(  9,  7,  6,     9,  4,  7,     9,  8,  4,     5,  1,  0);                           // { 0 1 0 0 1 1 0 1 }
    Tri(  3,  7,  1,     7,  6,  1,     5,  9,  8);                                          // { 1 1 0 0 1 1 0 1 }
    Qud(  2,  4,  7,     2,  9,  4,     4,  9,  8,     2,  1,  9);                           // { 0 0 1 0 1 1 0 1 }
    Tri(  8,  0,  9,     9,  0,  1,     3,  7,  2);                                          // { 1 0 1 0 1 1 0 1 }
    Tri(  2,  0,  7,     7,  0,  4,     5,  9,  8);                                          // { 0 1 1 0 1 1 0 1 }
    Duo(  5,  9,  8,     3,  7,  2);                                                         // { 1 1 1 0 1 1 0 1 }
    Qud(  8,  6,  9,     8,  2,  6,     8,  3,  2,     8,  4,  3);                           // { 0 0 0 1 1 1 0 1 }
    Tri(  9,  8,  0,     6,  0,  2,     6,  9,  0);                                          // { 1 0 0 1 1 1 0 1 }
    Tri(  0,  4,  3,     2,  6,  1,     5,  9,  8);                                          // { 0 1 0 1 1 1 0 1 }
    Duo(  5,  9,  8,     6,  1,  2);                                                         // { 1 1 0 1 1 1 0 1 }
    Tri(  8,  1,  9,     4,  3,  1,     4,  1,  8);                                          // { 0 0 1 1 1 1 0 1 }
    Duo(  0,  1,  8,     1,  9,  8);                                                         // { 1 0 1 1 1 1 0 1 }
    Duo(  4,  3,  0,     5,  9,  8);                                                         // { 0 1 1 1 1 1 0 1 }
    Mon(  9,  8,  5);                                                                        // { 1 1 1 1 1 1 0 1 }
    Duo(  9,  5, 11,     5,  4, 11);                                                         // { 0 0 0 0 0 0 1 1 }
    Tri(  0,  3, 11,     5, 11,  9,     5,  0, 11);                                          // { 1 0 0 0 0 0 1 1 }
    Tri(  0,  9,  1,     4, 11,  9,     4,  9,  0);                                          // { 0 1 0 0 0 0 1 1 }
    Duo(  9,  1,  3,     9,  3, 11);                                                         // { 1 1 0 0 0 0 1 1 }
    Tri( 11,  9,  4,     4,  9,  5,     6,  2,  1);                                          // { 0 0 1 0 0 0 1 1 }
    Qud(  0,  3, 11,     0, 11,  9,     0,  9,  5,     1,  6,  2);                           // { 1 0 1 0 0 0 1 1 }
    Qud(  2,  9,  6,     2,  0,  4,     2,  4, 11,     2, 11,  9);                           // { 0 1 1 0 0 0 1 1 }
    Tri(  2,  3, 11,     6, 11,  9,     6,  2, 11);                                          // { 1 1 1 0 0 0 1 1 }
    Tri(  9,  5, 11,     5,  4, 11,     7,  3,  2);                                          // { 0 0 0 1 0 0 1 1 }
    Qud(  9,  5,  0,     9,  7, 11,     9,  2,  7,     9,  0,  2);                           // { 1 0 0 1 0 0 1 1 }
    Qud(  0,  9,  1,     0, 11,  9,     0,  4, 11,     3,  2,  7);                           // { 0 1 0 1 0 0 1 1 }
    Tri(  2,  9,  1,     7, 11,  9,     7,  9,  2);                                          // { 1 1 0 1 0 0 1 1 }
    Qud(  4, 11,  9,     4,  9,  5,     3,  1,  6,     3,  6,  7);                           // { 0 0 1 1 0 0 1 1 }
    Tri( 11,  9,  7,     7,  9,  6,     5,  0,  1);                                          // { 1 0 1 1 0 0 1 1 }
    Tri(  9,  6, 11,     6,  7, 11,     4,  3,  0);                                          // { 0 1 1 1 0 0 1 1 }
    Duo( 11,  9,  7,     7,  9,  6);                                                         // { 1 1 1 1 0 0 1 1 }
    Tri( 10,  4,  7,     9,  5,  4,     9,  4, 10);                                          // { 0 0 0 0 1 0 1 1 }
    Qud(  9,  7, 10,     9,  3,  7,     9,  0,  3,     9,  5,  0);                           // { 1 0 0 0 1 0 1 1 }
    Qud( 10,  9,  1,    10,  1,  4,     1,  0,  4,    10,  4,  7);                           // { 0 1 0 0 1 0 1 1 }
    Tri( 10,  9,  1,     7,  1,  3,     7, 10,  1);                                          // { 1 1 0 0 1 0 1 1 }
    Qud( 10,  4,  7,    10,  5,  4,    10,  9,  5,     6,  2,  1);                           // { 0 0 1 0 1 0 1 1 }
    Tri(  1,  5,  0,     3,  7,  2,     6, 10,  9);                                          // { 1 0 1 0 1 0 1 1 }
    Tri(  0,  4,  2,     4,  7,  2,     6, 10,  9);                                          // { 0 1 1 0 1 0 1 1 }
    Duo(  6, 10,  9,     7,  2,  3);                                                         // { 1 1 1 0 1 0 1 1 }
    Qud(  3,  5,  4,     3, 10,  5,     5, 10,  9,     3,  2, 10);                           // { 0 0 0 1 1 0 1 1 }
    Tri(  9,  2, 10,     5,  0,  2,     5,  2,  9);                                          // { 1 0 0 1 1 0 1 1 }
    Tri(  9,  1, 10,    10,  1,  2,     0,  4,  3);                                          // { 0 1 0 1 1 0 1 1 }
    Duo(  1,  2,  9,     2, 10,  9);                                                         // { 1 1 0 1 1 0 1 1 }
    Tri(  3,  1,  4,     4,  1,  5,     6, 10,  9);                                          // { 0 0 1 1 1 0 1 1 }
    Duo(  5,  0,  1,     6, 10,  9);                                                         // { 1 0 1 1 1 0 1 1 }
    Duo(  6, 10,  9,     0,  4,  3);                                                         // { 0 1 1 1 1 0 1 1 }
    Mon( 10,  9,  6);                                                                        // { 1 1 1 1 1 0 1 1 }
    Tri( 11,  5,  4,    10,  6,  5,    10,  5, 11);                                          // { 0 0 0 0 0 1 1 1 }
    Qud(  0,  6,  5,     0, 11,  6,     6, 11, 10,     0,  3, 11);                           // { 1 0 0 0 0 1 1 1 }
    Qud( 10,  4, 11,    10,  0,  4,    10,  1,  0,    10,  6,  1);                           // { 0 1 0 0 0 1 1 1 }
    Tri( 10,  3, 11,     6,  1,  3,     6,  3, 10);                                          // { 1 1 0 0 0 1 1 1 }
    Qud( 11, 10,  2,    11,  2,  5,     2,  1,  5,    11,  5,  4);                           // { 0 0 1 0 0 1 1 1 }
    Tri( 10,  2, 11,    11,  2,  3,     1,  5,  0);                                          // { 1 0 1 0 0 1 1 1 }
    Tri( 11, 10,  2,     4,  2,  0,     4, 11,  2);                                          // { 0 1 1 0 0 1 1 1 }
    Duo(  2,  3, 10,     3, 11, 10);                                                         // { 1 1 1 0 0 1 1 1 }
    Qud( 11,  5,  4,    11,  6,  5,    11, 10,  6,     7,  3,  2);                           // { 0 0 0 1 0 1 1 1 }
    Tri(  0,  2,  5,     5,  2,  6,     7, 11, 10);                                          // { 1 0 0 1 0 1 1 1 }
    Tri(  2,  6,  1,     0,  4,  3,     7, 11, 10);                                          // { 0 1 0 1 0 1 1 1 }
    Duo(  6,  1,  2,     7, 11, 10);                                                         // { 1 1 0 1 0 1 1 1 }
    Tri(  1,  5,  3,     5,  4,  3,     7, 11, 10);                                          // { 0 0 1 1 0 1 1 1 }
    Duo(  7, 11, 10,     1,  5,  0);                                                         // { 1 0 1 1 0 1 1 1 }
    Duo(  7, 11, 10,     4,  3,  0);                                                         // { 0 1 1 1 0 1 1 1 }
    Mon( 11, 10,  7);                                                                        // { 1 1 1 1 0 1 1 1 }
    Duo(  4,  6,  5,     4,  7,  6);                                                         // { 0 0 0 0 1 1 1 1 }
    Tri(  0,  6,  5,     3,  7,  6,     3,  6,  0);                                          // { 1 0 0 0 1 1 1 1 }
    Tri(  1,  7,  6,     0,  4,  7,     0,  7,  1);                                          // { 0 1 0 0 1 1 1 1 }
    Duo(  3,  7,  1,     7,  6,  1);                                                         // { 1 1 0 0 1 1 1 1 }
    Tri(  2,  4,  7,     1,  5,  4,     1,  4,  2);                                          // { 0 0 1 0 1 1 1 1 }
    Duo(  3,  7,  2,     1,  5,  0);                                                         // { 1 0 1 0 1 1 1 1 }
    Duo(  0,  4,  2,     4,  7,  2);                                                         // { 0 1 1 0 1 1 1 1 }
    Mon(  3,  7,  2);                                                                        // { 1 1 1 0 1 1 1 1 }
    Tri(  3,  5,  4,     2,  6,  5,     2,  5,  3);                                          // { 0 0 0 1 1 1 1 1 }
    Duo(  2,  6,  0,     6,  5,  0);                                                         // { 1 0 0 1 1 1 1 1 }
    Duo(  2,  6,  1,     0,  4,  3);                                                         // { 0 1 0 1 1 1 1 1 }
    Mon(  2,  6,  1);                                                                        // { 1 1 0 1 1 1 1 1 }
    Duo(  1,  5,  3,     5,  4,  3);                                                         // { 0 0 1 1 1 1 1 1 }
    Mon(  1,  5,  0);                                                                        // { 1 0 1 1 1 1 1 1 }
    Mon(  0,  4,  3);                                                                        // { 0 1 1 1 1 1 1 1 }
    Non();                                                                                   // { 1 1 1 1 1 1 1 1 }
  }
  
  private static int n = 0;

  private static void Non() {
    CUBE_EDGE_INDICES[n++] = new int[] { };
  }
  
  private static void Mon(int a, int b, int c) {
    CUBE_EDGE_INDICES[n++] = new int[] { a, b, c };
  }
  
  private static void Duo(int a1, int b1, int c1, int a2, int b2, int c2) {
    CUBE_EDGE_INDICES[n++] = new int[] { a1, b1, c1, a2, b2, c2 };
  }
  
  private static void Tri(int a1, int b1, int c1, int a2, int b2, int c2, int a3, int b3, int c3) {
    CUBE_EDGE_INDICES[n++] = new int[] { a1, b1, c1, a2, b2, c2, a3, b3, c3 };
  }
  
  private static void Qud(int a1, int b1, int c1, int a2, int b2, int c2, int a3, int b3, int c3, int a4, int b4, int c4) {
    CUBE_EDGE_INDICES[n++] = new int[] { a1, b1, c1, a2, b2, c2, a3, b3, c3, a4, b4, c4 };
  }
}
